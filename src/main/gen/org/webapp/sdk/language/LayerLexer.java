/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package org.webapp.sdk.language;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import org.webapp.sdk.language.psi.LayerTypes;
import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>Layerfile.flex</tt>
 */
class LayerLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int BUTTON = 2;
  public static final int CACHE = 4;
  public static final int CLONE = 6;
  public static final int CHECKPOINT = 8;
  public static final int COPY = 10;
  public static final int ENV = 12;
  public static final int BUILD_ENV = 14;
  public static final int FROM = 16;
  public static final int MEMORY = 18;
  public static final int RUN = 20;
  public static final int RUN_BACKGROUND = 22;
  public static final int RUN_REPEATABLE = 24;
  public static final int SECRET_ENV = 26;
  public static final int SETUP_FILE = 28;
  public static final int SKIP_REMAINING_IF = 30;
  public static final int SPLIT = 32;
  public static final int EXPOSE_WEBSITE = 34;
  public static final int USER = 36;
  public static final int WAIT = 38;
  public static final int WORKDIR = 40;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  2,  2,  3,  3,  5,  5, 
     6,  6,  7,  7,  8,  8,  8,  8,  8,  8,  9,  9,  2,  2, 10, 10, 
    11, 11, 12, 12, 13, 13,  2,  2,  2, 2
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15392 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\1\36\2\12\1\15\1\37\3\12\1\40\10\12\1\41\1\42\5\15\1\43"+
    "\1\44\11\12\1\45\2\12\1\46\4\12\1\47\1\50\1\51\1\12\1\52\1\12\1\53\1\54\1"+
    "\55\3\12\51\15\1\56\3\15\1\57\1\60\4\15\1\61\12\12\1\62\u02c1\12\1\63\277"+
    "\12");

  /* The ZZ_CMAP_Y table has 3328 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14\1\13\1\14\34"+
    "\13\1\15\1\16\1\17\1\1\7\13\1\20\1\21\1\13\1\22\4\13\1\23\10\13\1\22\12\13"+
    "\1\24\1\13\1\25\1\24\1\13\1\26\1\24\1\13\1\27\1\30\1\13\1\31\1\32\1\1\1\31"+
    "\4\13\1\33\6\13\1\34\1\35\1\36\1\1\3\13\1\37\6\13\1\16\3\13\1\40\2\13\1\41"+
    "\1\1\1\13\1\42\4\1\1\13\1\43\1\1\1\44\1\22\7\13\1\45\1\24\1\34\1\46\1\35\1"+
    "\47\1\50\1\51\1\45\1\16\1\52\1\46\1\35\1\53\1\54\1\55\1\56\1\57\1\60\1\22"+
    "\1\35\1\61\1\62\1\63\1\45\1\64\1\65\1\46\1\35\1\61\1\66\1\67\1\45\1\70\1\71"+
    "\1\72\1\73\1\33\1\74\1\75\1\56\1\1\1\76\1\77\1\35\1\100\1\101\1\102\1\45\1"+
    "\1\1\76\1\77\1\35\1\103\1\101\1\104\1\45\1\105\1\106\1\77\1\13\1\37\1\107"+
    "\1\110\1\45\1\111\1\112\1\113\1\13\1\114\1\115\1\116\1\56\1\117\1\24\2\13"+
    "\1\31\1\120\1\121\2\1\1\122\1\123\1\124\1\125\1\126\1\127\2\1\1\63\1\130\1"+
    "\121\1\131\1\132\1\13\1\133\1\24\1\134\1\132\1\13\1\133\1\135\3\1\4\13\1\121"+
    "\4\13\1\41\2\13\1\136\2\13\1\137\24\13\1\140\1\141\2\13\1\140\2\13\1\142\1"+
    "\143\1\14\3\13\1\143\3\13\1\37\2\1\1\13\1\1\5\13\1\144\1\24\45\13\1\36\1\13"+
    "\1\145\1\31\4\13\1\146\1\147\1\150\1\151\1\13\1\151\1\13\1\152\1\150\1\153"+
    "\5\13\1\154\1\121\1\1\1\155\1\121\5\13\1\26\2\13\1\31\4\13\1\57\1\13\1\120"+
    "\2\42\1\56\1\13\1\41\1\151\2\13\1\42\1\13\2\121\2\1\1\13\1\42\3\13\1\120\1"+
    "\13\1\36\2\121\1\156\1\120\4\1\4\13\1\42\1\121\1\157\1\152\7\13\1\152\3\13"+
    "\1\26\1\100\2\13\1\41\1\147\4\1\1\160\1\13\1\161\17\13\1\162\21\13\1\144\2"+
    "\13\1\144\1\163\1\13\1\41\3\13\1\164\1\165\1\166\1\133\1\165\1\167\1\1\1\170"+
    "\1\171\1\63\1\172\1\1\1\173\1\1\1\133\3\1\2\13\1\63\1\174\1\175\1\176\1\127"+
    "\1\177\1\1\2\13\1\147\62\1\1\56\2\13\1\121\161\1\2\13\1\120\2\13\1\120\10"+
    "\13\1\200\1\152\2\13\1\136\3\13\1\201\1\171\1\13\1\202\4\203\2\13\2\1\1\171"+
    "\35\1\1\204\1\1\1\24\1\205\1\24\4\13\1\206\1\24\4\13\1\137\1\207\1\13\1\41"+
    "\1\24\4\13\1\120\1\1\1\13\1\31\3\1\1\13\40\1\133\13\1\57\4\1\135\13\1\57\2"+
    "\1\10\13\1\133\4\1\2\13\1\41\20\13\1\133\1\13\1\42\1\1\3\13\1\210\7\13\1\16"+
    "\1\1\1\211\1\212\5\13\1\213\1\13\1\120\1\26\3\1\1\211\2\13\1\26\1\1\3\13\1"+
    "\152\4\13\1\57\1\121\1\13\1\214\2\13\1\41\2\13\1\152\1\13\1\133\4\13\1\215"+
    "\1\121\1\13\1\120\3\13\1\202\1\41\1\121\1\13\1\113\4\13\1\32\1\155\1\13\1"+
    "\216\1\217\1\220\1\203\2\13\1\137\1\57\7\13\1\221\1\121\72\13\1\152\1\13\1"+
    "\222\2\13\1\42\20\1\26\13\1\41\6\13\1\121\2\1\1\202\1\223\1\35\1\224\1\225"+
    "\6\13\1\16\1\1\1\226\25\13\1\41\1\1\4\13\1\212\2\13\1\26\2\1\1\42\1\13\1\1"+
    "\1\13\1\227\1\230\2\1\1\134\7\13\1\133\1\1\1\121\1\24\1\231\1\24\1\31\1\56"+
    "\4\13\1\120\1\232\1\233\2\1\1\234\1\13\1\14\1\235\2\41\2\1\7\13\1\31\4\1\3"+
    "\13\1\151\7\1\1\236\10\1\1\13\1\133\3\13\2\63\1\1\2\13\1\1\1\13\1\31\2\13"+
    "\1\31\1\13\1\41\2\13\1\237\1\240\2\1\11\13\1\41\1\121\2\13\1\237\1\13\1\42"+
    "\2\13\1\26\3\13\1\152\11\1\23\13\1\202\1\13\1\57\1\26\11\1\1\241\2\13\1\242"+
    "\1\13\1\57\1\13\1\202\1\13\1\120\4\1\1\13\1\243\1\13\1\57\1\13\1\121\4\1\3"+
    "\13\1\244\4\1\1\245\1\246\1\13\1\247\2\1\1\13\1\133\1\13\1\133\2\1\1\132\1"+
    "\13\1\202\1\1\3\13\1\57\1\13\1\57\1\13\1\32\1\13\1\16\6\1\4\13\1\147\3\1\3"+
    "\13\1\32\3\13\1\32\60\1\4\13\1\202\1\1\1\56\1\171\3\13\1\31\1\1\1\13\1\147"+
    "\1\121\3\13\1\134\1\1\2\13\1\250\4\13\1\251\1\252\2\1\1\13\1\22\1\13\1\253"+
    "\4\1\1\254\1\27\1\147\3\13\1\31\1\121\1\34\1\46\1\35\1\61\1\66\1\255\1\256"+
    "\1\151\10\1\4\13\1\31\1\121\2\1\4\13\1\257\1\121\12\1\3\13\1\260\1\63\1\261"+
    "\2\1\4\13\1\262\1\121\2\1\3\13\1\26\1\121\3\1\1\13\1\100\1\42\1\121\26\1\4"+
    "\13\1\121\1\171\34\1\3\13\1\147\20\1\1\35\2\13\1\14\1\63\1\121\1\1\1\212\1"+
    "\13\1\212\1\132\1\202\64\1\71\13\1\121\6\1\6\13\1\120\1\1\14\13\1\152\53\1"+
    "\2\13\1\120\75\1\44\13\1\202\33\1\43\13\1\147\1\13\1\120\1\121\6\1\1\13\1"+
    "\41\1\151\3\13\1\202\1\152\1\121\1\226\1\263\1\13\67\1\4\13\1\151\2\13\1\120"+
    "\1\171\1\13\4\1\1\63\1\1\76\13\1\133\1\1\57\13\1\32\20\1\1\16\77\1\6\13\1"+
    "\31\1\133\1\147\1\264\114\1\1\265\1\266\1\267\1\1\1\270\11\1\1\271\33\1\5"+
    "\13\1\134\3\13\1\150\1\272\1\273\1\274\3\13\1\275\1\276\1\13\1\277\1\300\1"+
    "\77\24\13\1\260\1\13\1\77\1\137\1\13\1\137\1\13\1\134\1\13\1\134\1\120\1\13"+
    "\1\120\1\13\1\35\1\13\1\35\1\13\1\301\3\13\40\1\3\13\1\222\2\13\1\133\1\302"+
    "\1\303\1\157\1\24\25\1\1\14\1\213\1\304\75\1\14\13\1\151\1\202\2\1\4\13\1"+
    "\31\1\121\112\1\1\274\1\13\1\305\1\306\1\307\1\310\1\311\1\312\1\313\1\42"+
    "\1\314\1\42\47\1\1\13\1\121\1\13\1\121\1\13\1\121\47\1\55\13\1\202\2\1\103"+
    "\13\1\151\15\13\1\41\150\13\1\16\25\1\41\13\1\41\56\1\17\13\41\1");

  /* The ZZ_CMAP_A table has 3280 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\5\1\2\2\5\1\1\22\0\1\27\1\7\1\11\1\4\1\13\2\0\1\12\1\14\1\15\6\0\12"+
    "\47\3\0\1\10\3\0\1\17\1\31\1\24\1\21\1\23\1\44\1\43\1\45\1\33\1\47\1\41\1"+
    "\34\1\42\1\20\1\37\1\36\1\47\1\25\1\22\1\26\1\32\1\30\1\40\1\35\1\46\1\47"+
    "\1\0\1\3\2\0\1\47\1\16\32\47\3\0\1\6\6\0\1\5\12\0\1\5\11\0\1\47\12\0\1\47"+
    "\4\0\1\47\5\0\27\47\1\0\12\47\4\0\14\47\16\0\5\47\7\0\1\47\1\0\1\47\1\0\5"+
    "\47\1\0\2\47\2\0\4\47\1\0\1\47\6\0\1\47\1\0\3\47\1\0\1\47\1\0\4\47\1\0\23"+
    "\47\1\0\11\47\1\0\26\47\2\0\1\47\6\0\10\47\10\0\16\47\1\0\1\47\1\0\2\47\1"+
    "\0\2\47\1\0\1\47\10\0\13\47\5\0\3\47\15\0\12\47\4\0\6\47\1\0\10\47\2\0\12"+
    "\47\1\0\23\47\2\0\14\47\2\0\11\47\4\0\1\47\5\0\16\47\2\0\14\47\4\0\5\47\1"+
    "\0\10\47\6\0\20\47\2\0\13\47\2\0\16\47\1\0\1\47\3\0\4\47\2\0\11\47\2\0\2\47"+
    "\2\0\4\47\10\0\1\47\4\0\2\47\1\0\1\47\1\0\3\47\1\0\6\47\4\0\2\47\1\0\2\47"+
    "\1\0\2\47\1\0\2\47\2\0\1\47\1\0\5\47\4\0\2\47\2\0\3\47\3\0\1\47\7\0\4\47\1"+
    "\0\1\47\7\0\20\47\13\0\3\47\1\0\11\47\1\0\2\47\1\0\2\47\1\0\5\47\2\0\12\47"+
    "\1\0\3\47\1\0\3\47\2\0\1\47\30\0\1\47\7\0\3\47\1\0\10\47\2\0\6\47\2\0\2\47"+
    "\2\0\3\47\10\0\2\47\4\0\2\47\1\0\1\47\1\0\1\47\20\0\2\47\1\0\6\47\3\0\3\47"+
    "\1\0\4\47\3\0\2\47\1\0\1\47\1\0\2\47\3\0\2\47\3\0\3\47\3\0\5\47\3\0\3\47\1"+
    "\0\4\47\2\0\1\47\6\0\1\47\10\0\4\47\1\0\10\47\1\0\3\47\1\0\30\47\3\0\10\47"+
    "\1\0\3\47\1\0\4\47\7\0\2\47\1\0\3\47\5\0\4\47\1\0\5\47\2\0\4\47\5\0\2\47\7"+
    "\0\1\47\2\0\2\47\16\0\3\47\1\0\10\47\1\0\7\47\1\0\3\47\1\0\5\47\5\0\4\47\7"+
    "\0\1\47\12\0\6\47\2\0\2\47\1\0\22\47\3\0\10\47\1\0\11\47\1\0\1\47\2\0\7\47"+
    "\3\0\1\47\4\0\6\47\1\0\1\47\1\0\10\47\2\0\2\47\14\0\17\47\1\0\12\47\7\0\2"+
    "\47\1\0\1\47\2\0\2\47\1\0\1\47\2\0\1\47\6\0\4\47\1\0\7\47\1\0\3\47\1\0\1\47"+
    "\1\0\1\47\2\0\2\47\1\0\15\47\1\0\3\47\2\0\5\47\1\0\1\47\1\0\6\47\2\0\12\47"+
    "\2\0\4\47\10\0\2\47\13\0\1\47\1\0\1\47\1\0\1\47\4\0\12\47\1\0\24\47\3\0\5"+
    "\47\1\0\12\47\6\0\1\47\11\0\6\47\1\0\1\47\5\0\1\47\2\0\13\47\1\0\15\47\1\0"+
    "\4\47\2\0\7\47\1\0\1\47\1\0\4\47\2\0\1\47\1\0\4\47\2\0\7\47\1\0\1\47\1\0\4"+
    "\47\2\0\16\47\2\0\6\47\2\0\1\5\32\47\3\0\13\47\7\0\15\47\1\0\7\47\13\0\4\47"+
    "\14\0\1\47\1\0\2\47\14\0\4\47\3\0\1\47\4\0\2\47\15\0\3\47\11\0\1\47\23\0\10"+
    "\47\1\0\23\47\1\0\2\47\6\0\6\47\5\0\15\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0\6"+
    "\47\1\0\7\47\1\0\1\47\3\0\3\47\1\0\7\47\3\0\4\47\2\0\6\47\4\0\13\5\15\0\2"+
    "\5\5\0\1\5\17\0\1\47\4\0\1\47\12\0\1\5\1\0\1\47\15\0\1\47\2\0\1\47\4\0\1\47"+
    "\2\0\12\47\1\0\1\47\3\0\5\47\6\0\1\47\1\0\1\47\1\0\1\47\1\0\4\47\1\0\1\47"+
    "\5\0\5\47\4\0\1\47\1\0\5\47\6\0\15\47\7\0\10\47\11\0\7\47\1\0\7\47\1\0\1\5"+
    "\4\0\3\47\11\0\5\47\2\0\5\47\3\0\7\47\2\0\2\47\2\0\3\47\5\0\16\47\1\0\12\47"+
    "\1\0\1\47\7\0\11\47\2\0\27\47\2\0\15\47\3\0\1\47\1\0\1\47\2\0\1\47\16\0\1"+
    "\47\2\0\5\47\12\0\6\47\2\0\6\47\2\0\6\47\11\0\13\47\1\0\2\47\2\0\7\47\4\0"+
    "\5\47\3\0\5\47\5\0\12\47\1\0\5\47\1\0\1\47\1\0\2\47\1\0\2\47\1\0\12\47\3\0"+
    "\15\47\3\0\2\47\30\0\16\47\4\0\1\47\2\0\6\47\2\0\6\47\2\0\6\47\2\0\3\47\3"+
    "\0\14\47\1\0\16\47\1\0\2\47\1\0\1\47\15\0\1\47\2\0\4\47\4\0\10\47\1\0\5\47"+
    "\12\0\6\47\2\0\1\47\1\0\14\47\1\0\2\47\3\0\1\47\2\0\4\47\1\0\2\47\12\0\10"+
    "\47\6\0\6\47\1\0\2\47\5\0\10\47\1\0\3\47\1\0\13\47\4\0\3\47\4\0\5\47\2\0\1"+
    "\47\11\0\5\47\5\0\3\47\3\0\13\47\1\0\1\47\3\0\10\47\6\0\1\47\1\0\7\47\1\0"+
    "\1\47\1\0\4\47\1\0\2\47\6\0\1\47\5\0\7\47\2\0\7\47\3\0\6\47\1\0\1\47\10\0"+
    "\6\47\2\0\10\47\10\0\6\47\2\0\1\47\3\0\1\47\13\0\10\47\5\0\15\47\3\0\2\47"+
    "\6\0\5\47\3\0\6\47\10\0\10\47\2\0\7\47\16\0\4\47\4\0\3\47\15\0\1\47\2\0\2"+
    "\47\2\0\4\47\1\0\14\47\1\0\1\47\1\0\7\47\1\0\21\47\1\0\4\47\2\0\10\47\1\0"+
    "\7\47\1\0\14\47\1\0\4\47\1\0\5\47\1\0\1\47\3\0\11\47\1\0\10\47\2\0\2\47\5"+
    "\0\1\47\16\0\1\47\13\0\2\47\1\0\2\47\1\0\5\47\6\0\2\47\1\0\1\47\2\0\1\47\1"+
    "\0\12\47\1\0\4\47\1\0\1\47\1\0\1\47\6\0\1\47\4\0\1\47\1\0\1\47\1\0\1\47\1"+
    "\0\3\47\1\0\2\47\1\0\1\47\2\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0\1\47\1\0"+
    "\2\47\1\0\1\47\2\0\4\47\1\0\7\47\1\0\4\47\1\0\4\47\1\0\1\47\1\0\12\47\1\0"+
    "\5\47\1\0\3\47\1\0\5\47\1\0\5\47");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\16\0\1\1\1\2\1\3\12\1\1\4\2\5\1\6"+
    "\1\7\1\1\1\10\4\7\1\11\1\12\1\13\1\14"+
    "\2\15\1\16\6\17\1\20\1\21\1\22\20\1\1\10"+
    "\1\0\1\23\1\0\1\7\1\0\1\2\1\23\2\17"+
    "\4\1\1\24\5\1\1\25\7\1\1\23\1\0\1\26"+
    "\7\1\1\27\1\1\1\0\2\1\1\30\1\31\2\1"+
    "\1\32\2\1\1\33\1\0\1\1\1\34\1\35\1\1"+
    "\2\0\5\1\2\0\2\1\2\0\1\36\1\0\1\1"+
    "\1\37\4\0\1\1\3\0\1\40\4\0\1\1\7\0"+
    "\1\1\2\0\1\41\1\42\1\43\2\0\1\44\17\0"+
    "\1\45\1\46\1\47\2\0\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\120\0\170\0\240\0\310\0\360\0\u0118"+
    "\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208\0\u0230\0\u0230"+
    "\0\u0258\0\u0280\0\u02a8\0\u02d0\0\u02f8\0\u0320\0\u0348\0\u0370"+
    "\0\u0398\0\u03c0\0\u03e8\0\u0410\0\u0438\0\u0230\0\u0460\0\u0488"+
    "\0\u04b0\0\u04d8\0\u0500\0\u0528\0\u0550\0\u0578\0\u05a0\0\u05c8"+
    "\0\u05f0\0\u0618\0\u0640\0\u0668\0\u0690\0\u06b8\0\u06e0\0\u0708"+
    "\0\u0730\0\u0758\0\u0780\0\u07a8\0\u07d0\0\u07f8\0\u0820\0\u0848"+
    "\0\u0870\0\u0898\0\u08c0\0\u08e8\0\u0910\0\u0938\0\u0960\0\u0988"+
    "\0\u09b0\0\u09d8\0\u0a00\0\u0a28\0\u0a50\0\u0a78\0\u0230\0\u0aa0"+
    "\0\u0488\0\u0ac8\0\u0af0\0\u0b18\0\u0b40\0\u06b8\0\u0b68\0\u0b90"+
    "\0\u0bb8\0\u0be0\0\u0c08\0\u0c30\0\u0280\0\u0c58\0\u0c80\0\u0ca8"+
    "\0\u0cd0\0\u0cf8\0\u0d20\0\u0d48\0\u0d70\0\u0d98\0\u0dc0\0\u0de8"+
    "\0\u0e10\0\u0e38\0\u0230\0\u0e60\0\u06b8\0\u0e88\0\u0eb0\0\u0ed8"+
    "\0\u0f00\0\u0f28\0\u0f50\0\u0f78\0\u0280\0\u0fa0\0\u0fc8\0\u0ff0"+
    "\0\u1018\0\u0280\0\u0280\0\u1040\0\u1068\0\u0280\0\u1090\0\u10b8"+
    "\0\u0280\0\u10e0\0\u1108\0\u0280\0\u0280\0\u1130\0\u1158\0\u1180"+
    "\0\u11a8\0\u11d0\0\u11f8\0\u1220\0\u1248\0\u1270\0\u1298\0\u12c0"+
    "\0\u12e8\0\u1310\0\u1338\0\u0280\0\u1360\0\u1388\0\u0280\0\u13b0"+
    "\0\u13d8\0\u1400\0\u1428\0\u1450\0\u1478\0\u14a0\0\u14c8\0\u0280"+
    "\0\u14f0\0\u1518\0\u1540\0\u1568\0\u1590\0\u15b8\0\u15e0\0\u1608"+
    "\0\u1630\0\u1658\0\u1680\0\u16a8\0\u16d0\0\u16f8\0\u1720\0\u0230"+
    "\0\u0230\0\u0230\0\u1748\0\u1770\0\u0280\0\u1798\0\u17c0\0\u17e8"+
    "\0\u1810\0\u1838\0\u1860\0\u1888\0\u18b0\0\u18d8\0\u1900\0\u1928"+
    "\0\u1950\0\u1978\0\u19a0\0\u19c8\0\u0230\0\u0230\0\u0230\0\u19f0"+
    "\0\u1a18\0\u0230";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\17\2\20\1\17\1\21\1\20\11\17\3\22\1\23"+
    "\1\24\1\25\1\26\1\22\1\20\1\22\1\27\1\30"+
    "\5\22\1\31\1\22\1\32\1\22\1\33\3\22\1\34"+
    "\1\35\1\36\2\34\1\20\21\34\1\20\20\34\1\37"+
    "\1\35\1\36\2\37\1\20\21\37\1\20\20\37\1\40"+
    "\1\35\1\36\2\40\1\20\1\17\1\41\1\42\1\43"+
    "\1\44\1\45\2\40\1\46\10\40\1\20\20\40\1\47"+
    "\1\35\1\36\2\47\1\20\21\47\1\20\20\47\1\50"+
    "\1\35\1\36\2\50\1\20\21\50\1\20\20\50\1\51"+
    "\1\35\1\36\2\51\1\20\21\51\1\20\20\51\1\52"+
    "\1\35\1\36\2\52\1\20\21\52\1\20\20\52\1\53"+
    "\1\35\1\36\1\54\1\53\1\20\21\53\1\20\20\53"+
    "\1\55\1\35\1\36\2\55\1\20\21\55\1\20\20\55"+
    "\1\56\1\35\1\36\2\56\1\20\1\17\1\41\1\42"+
    "\1\57\1\60\1\61\2\56\1\62\1\63\7\56\1\20"+
    "\20\56\1\64\1\35\1\36\2\64\1\20\21\64\1\20"+
    "\20\64\1\65\1\35\1\36\2\65\1\20\21\65\1\20"+
    "\20\65\1\66\1\35\1\36\2\66\1\20\21\66\1\20"+
    "\20\66\50\0\1\21\2\0\45\21\17\0\10\22\1\0"+
    "\20\22\17\0\4\22\1\67\3\22\1\0\6\22\1\70"+
    "\2\22\1\71\6\22\17\0\1\22\1\72\6\22\1\0"+
    "\5\22\1\73\12\22\17\0\1\74\7\22\1\0\4\22"+
    "\1\75\2\22\1\76\5\22\1\77\2\22\17\0\10\22"+
    "\1\0\2\22\1\100\15\22\17\0\10\22\1\0\2\22"+
    "\1\101\15\22\17\0\3\22\1\102\4\22\1\0\20\22"+
    "\17\0\1\103\7\22\1\0\7\22\1\104\10\22\17\0"+
    "\4\22\1\105\3\22\1\0\20\22\17\0\6\22\1\106"+
    "\1\22\1\0\20\22\1\34\3\0\44\34\2\0\1\36"+
    "\45\0\1\37\2\0\2\37\1\0\21\37\1\0\20\37"+
    "\1\40\2\0\2\40\4\0\16\40\1\0\20\40\10\0"+
    "\1\42\45\0\1\107\41\0\1\43\2\0\2\43\4\110"+
    "\1\111\15\43\1\110\20\43\1\44\2\0\2\44\4\112"+
    "\1\44\1\111\14\44\1\112\20\44\1\40\2\0\2\40"+
    "\4\0\3\40\1\113\12\40\1\0\20\40\1\46\2\0"+
    "\2\46\4\114\5\46\1\111\10\46\1\114\20\46\1\47"+
    "\2\0\2\47\1\0\21\47\1\0\20\47\1\50\2\0"+
    "\2\50\1\0\21\50\1\0\20\50\1\51\3\0\44\51"+
    "\1\52\3\0\44\52\1\53\3\0\45\53\1\115\1\20"+
    "\1\0\44\53\1\55\2\0\2\55\1\0\21\55\1\0"+
    "\20\55\1\56\2\0\2\56\4\0\16\56\1\0\20\56"+
    "\1\57\2\0\2\57\4\110\1\116\15\57\1\110\20\57"+
    "\1\60\2\0\2\60\4\112\1\60\1\116\14\60\1\112"+
    "\20\60\1\56\2\0\2\56\4\0\3\56\1\117\12\56"+
    "\1\0\20\56\1\62\2\0\2\62\4\114\5\62\1\116"+
    "\10\62\1\114\20\62\1\56\2\0\2\56\4\0\7\56"+
    "\1\120\6\56\1\0\20\56\1\64\3\0\44\64\1\65"+
    "\2\0\2\65\1\0\21\65\1\0\20\65\1\66\3\0"+
    "\44\66\17\0\5\22\1\121\1\22\1\122\1\0\20\22"+
    "\17\0\10\22\1\0\4\22\1\123\13\22\17\0\10\22"+
    "\1\0\3\22\1\124\14\22\17\0\10\22\1\0\1\125"+
    "\17\22\17\0\10\22\1\0\6\22\1\126\11\22\17\0"+
    "\5\22\1\127\2\22\1\0\20\22\17\0\10\22\1\0"+
    "\7\22\1\130\10\22\17\0\10\22\1\0\6\22\1\131"+
    "\11\22\17\0\4\22\1\132\3\22\1\0\20\22\17\0"+
    "\1\22\1\133\6\22\1\0\20\22\17\0\7\22\1\134"+
    "\1\0\3\22\1\135\14\22\17\0\4\22\1\136\3\22"+
    "\1\0\20\22\17\0\10\22\1\0\3\22\1\137\14\22"+
    "\17\0\6\22\1\140\1\22\1\0\20\22\17\0\10\22"+
    "\1\0\12\22\1\141\5\22\17\0\10\22\1\0\7\22"+
    "\1\142\10\22\1\110\2\0\6\110\1\143\36\110\1\112"+
    "\2\0\7\112\1\143\35\112\1\113\2\0\2\113\4\144"+
    "\2\113\1\40\1\113\1\111\11\113\1\144\20\113\1\114"+
    "\2\0\13\114\1\143\31\114\2\0\1\20\45\0\1\117"+
    "\2\0\2\117\4\144\2\117\1\56\1\117\1\116\11\117"+
    "\1\144\20\117\1\56\2\0\2\56\4\0\10\56\1\145"+
    "\5\56\1\0\20\56\17\0\6\22\1\146\1\22\1\0"+
    "\20\22\17\0\10\22\1\0\2\22\1\147\15\22\17\0"+
    "\10\22\1\0\3\22\1\150\14\22\17\0\10\22\1\0"+
    "\6\22\1\151\11\22\17\0\10\22\1\0\7\22\1\152"+
    "\10\22\17\0\10\22\1\0\15\22\1\153\2\22\17\0"+
    "\1\22\1\154\6\22\1\0\20\22\17\0\10\22\1\0"+
    "\16\22\1\155\1\22\17\0\5\22\1\156\2\22\1\0"+
    "\20\22\17\0\10\22\1\157\20\22\17\0\7\22\1\160"+
    "\1\0\20\22\17\0\10\22\1\0\4\22\1\161\13\22"+
    "\17\0\6\22\1\162\1\22\1\0\20\22\17\0\7\22"+
    "\1\163\1\0\20\22\17\0\10\22\1\0\11\22\1\164"+
    "\6\22\17\0\10\22\1\0\7\22\1\165\10\22\17\0"+
    "\10\22\1\0\12\22\1\166\5\22\1\144\2\0\10\144"+
    "\1\0\1\144\1\143\32\144\17\0\4\22\1\167\3\22"+
    "\1\0\20\22\17\0\10\22\1\0\6\22\1\170\11\22"+
    "\17\0\7\22\1\171\1\0\20\22\17\0\10\22\1\172"+
    "\20\22\17\0\3\22\1\173\4\22\1\0\20\22\17\0"+
    "\4\22\1\174\3\22\1\0\20\22\17\0\4\22\1\175"+
    "\3\22\1\0\20\22\17\0\10\22\1\0\11\22\1\176"+
    "\6\22\25\0\1\177\3\0\1\200\35\0\10\22\1\0"+
    "\7\22\1\201\10\22\17\0\2\22\1\202\5\22\1\0"+
    "\20\22\17\0\2\22\1\203\5\22\1\0\20\22\17\0"+
    "\6\22\1\204\1\22\1\0\20\22\17\0\7\22\1\205"+
    "\1\0\20\22\17\0\10\22\1\206\20\22\25\0\1\207"+
    "\41\0\4\22\1\210\3\22\1\0\20\22\17\0\10\22"+
    "\1\0\6\22\1\211\11\22\23\0\1\212\43\0\1\213"+
    "\47\0\1\22\1\214\6\22\1\0\20\22\17\0\10\22"+
    "\1\215\20\22\17\0\10\22\1\0\3\22\1\216\14\22"+
    "\17\0\10\22\1\0\16\22\1\217\1\22\17\0\10\22"+
    "\1\220\20\22\44\0\1\221\26\0\1\222\43\0\10\22"+
    "\1\223\20\22\17\0\10\22\1\0\7\22\1\224\10\22"+
    "\36\0\1\225\35\0\1\226\46\0\1\227\43\0\6\22"+
    "\1\230\1\22\1\0\20\22\23\0\1\231\57\0\1\232"+
    "\56\0\1\233\45\0\1\234\26\0\10\22\1\0\3\22"+
    "\1\235\14\22\23\0\1\236\65\0\1\237\26\0\1\240"+
    "\47\0\1\241\63\0\1\242\32\0\1\243\53\0\1\244"+
    "\43\0\1\22\1\245\6\22\1\0\20\22\17\0\1\246"+
    "\73\0\1\247\34\0\1\250\47\0\1\251\42\0\1\252"+
    "\57\0\1\253\45\0\1\254\35\0\7\22\1\255\1\0"+
    "\20\22\26\0\1\256\46\0\1\257\42\0\1\260\51\0"+
    "\1\261\44\0\1\262\67\0\1\263\43\0\1\264\47\0"+
    "\1\265\45\0\1\266\50\0\1\267\35\0\1\270\55\0"+
    "\1\271\55\0\1\272\33\0\1\273\72\0\1\274\27\0"+
    "\1\275\47\0\1\276\45\0\1\277\55\0\1\300\53\0"+
    "\1\301\60\0\1\302\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6720];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\16\0\2\11\15\1\1\11\50\1\1\11\1\0\1\1"+
    "\1\0\1\1\1\0\26\1\1\11\1\0\12\1\1\0"+
    "\12\1\1\0\4\1\2\0\5\1\2\0\2\1\2\0"+
    "\1\1\1\0\2\1\4\0\1\1\3\0\1\1\4\0"+
    "\1\1\7\0\1\1\2\0\3\11\2\0\1\1\17\0"+
    "\3\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LayerLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        switch (zzLexicalState) {
            case BUTTON: {
              yybegin(YYINITIAL); return LayerTypes.EOL;
            }  // fall though
            case 195: break;
            case CACHE: {
              yybegin(YYINITIAL); return LayerTypes.EOL;
            }  // fall though
            case 196: break;
            case CLONE: {
              yybegin(YYINITIAL); return LayerTypes.EOL;
            }  // fall though
            case 197: break;
            case CHECKPOINT: {
              yybegin(YYINITIAL); return LayerTypes.EOL;
            }  // fall though
            case 198: break;
            case COPY: {
              yybegin(YYINITIAL); return LayerTypes.EOL;
            }  // fall though
            case 199: break;
            case ENV: {
              yybegin(YYINITIAL); return LayerTypes.EOL;
            }  // fall though
            case 200: break;
            case BUILD_ENV: {
              yybegin(YYINITIAL); return LayerTypes.EOL;
            }  // fall though
            case 201: break;
            case FROM: {
              yybegin(YYINITIAL); return LayerTypes.EOL;
            }  // fall though
            case 202: break;
            case MEMORY: {
              yybegin(YYINITIAL); return LayerTypes.EOL;
            }  // fall though
            case 203: break;
            case RUN: {
              yybegin(YYINITIAL); return LayerTypes.EOL;
            }  // fall though
            case 204: break;
            case RUN_BACKGROUND: {
              yybegin(YYINITIAL); return LayerTypes.EOL;
            }  // fall though
            case 205: break;
            case RUN_REPEATABLE: {
              yybegin(YYINITIAL); return LayerTypes.EOL;
            }  // fall though
            case 206: break;
            case SECRET_ENV: {
              yybegin(YYINITIAL); return LayerTypes.EOL;
            }  // fall though
            case 207: break;
            case SETUP_FILE: {
              yybegin(YYINITIAL); return LayerTypes.EOL;
            }  // fall though
            case 208: break;
            case SKIP_REMAINING_IF: {
              yybegin(YYINITIAL); return LayerTypes.EOL;
            }  // fall though
            case 209: break;
            case SPLIT: {
              yybegin(YYINITIAL); return LayerTypes.EOL;
            }  // fall though
            case 210: break;
            case EXPOSE_WEBSITE: {
              yybegin(YYINITIAL); return LayerTypes.EOL;
            }  // fall though
            case 211: break;
            case USER: {
              yybegin(YYINITIAL); return LayerTypes.EOL;
            }  // fall though
            case 212: break;
            case WAIT: {
              yybegin(YYINITIAL); return LayerTypes.EOL;
            }  // fall though
            case 213: break;
            case WORKDIR: {
              yybegin(YYINITIAL); return LayerTypes.EOL;
            }  // fall though
            case 214: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 41: break;
          case 2: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 42: break;
          case 3: 
            { yybegin(YYINITIAL); return LayerTypes.COMMENT;
            } 
            // fall through
          case 43: break;
          case 4: 
            { return LayerTypes.BUTTON_DATA;
            } 
            // fall through
          case 44: break;
          case 5: 
            { yybegin(YYINITIAL); return LayerTypes.EOL;
            } 
            // fall through
          case 45: break;
          case 6: 
            { return LayerTypes.FILE;
            } 
            // fall through
          case 46: break;
          case 7: 
            { return LayerTypes.VALUE;
            } 
            // fall through
          case 47: break;
          case 8: 
            { return LayerTypes.OPERATOR;
            } 
            // fall through
          case 48: break;
          case 9: 
            { return LayerTypes.CHECKPOINT_VALUE;
            } 
            // fall through
          case 49: break;
          case 10: 
            { return LayerTypes.BUILD_ENV_VALUE;
            } 
            // fall through
          case 50: break;
          case 11: 
            { return LayerTypes.FROM_DATA;
            } 
            // fall through
          case 51: break;
          case 12: 
            { return LayerTypes.MEMORY_AMOUNT;
            } 
            // fall through
          case 52: break;
          case 13: 
            { return LayerTypes.RUN_DATA;
            } 
            // fall through
          case 53: break;
          case 14: 
            { return LayerTypes.SECRET_ENV_VALUE;
            } 
            // fall through
          case 54: break;
          case 15: 
            { return LayerTypes.SKIP_VALUE;
            } 
            // fall through
          case 55: break;
          case 16: 
            { return LayerTypes.SPLIT_NUMBER;
            } 
            // fall through
          case 56: break;
          case 17: 
            { return LayerTypes.WEBSITE_ITEM;
            } 
            // fall through
          case 57: break;
          case 18: 
            { return LayerTypes.USER_NAME;
            } 
            // fall through
          case 58: break;
          case 19: 
            { return LayerTypes.STRING;
            } 
            // fall through
          case 59: break;
          case 20: 
            { yybegin(ENV); return LayerTypes.ENV;
            } 
            // fall through
          case 60: break;
          case 21: 
            { yybegin(RUN); return LayerTypes.RUN;
            } 
            // fall through
          case 61: break;
          case 22: 
            { return LayerTypes.SKIP_REMAINING_IF_AND;
            } 
            // fall through
          case 62: break;
          case 23: 
            { yybegin(COPY); return LayerTypes.COPY;
            } 
            // fall through
          case 63: break;
          case 24: 
            { yybegin(USER); return LayerTypes.USER;
            } 
            // fall through
          case 64: break;
          case 25: 
            { yybegin(WAIT); return LayerTypes.WAIT;
            } 
            // fall through
          case 65: break;
          case 26: 
            { yybegin(FROM); return LayerTypes.FROM;
            } 
            // fall through
          case 66: break;
          case 27: 
            { yybegin(SPLIT); return LayerTypes.SPLIT;
            } 
            // fall through
          case 67: break;
          case 28: 
            { yybegin(CACHE); return LayerTypes.CACHE;
            } 
            // fall through
          case 68: break;
          case 29: 
            { yybegin(CLONE); return LayerTypes.CLONE;
            } 
            // fall through
          case 69: break;
          case 30: 
            { yybegin(BUTTON); return LayerTypes.BUTTON;
            } 
            // fall through
          case 70: break;
          case 31: 
            { yybegin(MEMORY); return LayerTypes.MEMORY;
            } 
            // fall through
          case 71: break;
          case 32: 
            { yybegin(WORKDIR); return LayerTypes.WORKDIR;
            } 
            // fall through
          case 72: break;
          case 33: 
            { yybegin(BUILD_ENV); return LayerTypes.BUILD_ENV;
            } 
            // fall through
          case 73: break;
          case 34: 
            { yybegin(SECRET_ENV); return LayerTypes.SECRET_ENV;
            } 
            // fall through
          case 74: break;
          case 35: 
            { yybegin(SETUP_FILE); return LayerTypes.SETUP_FILE;
            } 
            // fall through
          case 75: break;
          case 36: 
            { yybegin(CHECKPOINT); return LayerTypes.CHECKPOINT;
            } 
            // fall through
          case 76: break;
          case 37: 
            { yybegin(EXPOSE_WEBSITE); return LayerTypes.EXPOSE_WEBSITE;
            } 
            // fall through
          case 77: break;
          case 38: 
            { yybegin(RUN_REPEATABLE); return LayerTypes.RUN_REPEATABLE;
            } 
            // fall through
          case 78: break;
          case 39: 
            { yybegin(RUN_BACKGROUND); return LayerTypes.RUN_BACKGROUND;
            } 
            // fall through
          case 79: break;
          case 40: 
            { yybegin(SKIP_REMAINING_IF); return LayerTypes.SKIP_REMAINING_IF;
            } 
            // fall through
          case 80: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
